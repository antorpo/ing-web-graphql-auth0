datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  roleId        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role Role? @relation(fields: [roleId], references: [id])
  accounts     Account[]
  sessions     Session[]
  restaurants  Restaurant[]
  reservations Reservation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

// Appetite Schema

enum Enum_RoleType {
  ADMIN
  CLIENT
}

enum Enum_RestaurantType {
  JUNKFOOD
  VEGETARIANFOOD
  MEATFOOD
  DESSERTFOOD
  JAPANESEFOOD
  PERUVIANFOOD
  COLOMBIANFOOD
  MEXICANFOOD
  ITALIANFOOD
  CHINAFOOD
}

enum Enum_DayType {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Role {
  id    String        @id @default(cuid())
  type  Enum_RoleType
  users User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id           String              @id @default(cuid())
  name         String
  phoneNumber  String
  type         Enum_RestaurantType
  headquarters Headquarter[]
  user   User   @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id        String       @id @default(cuid())
  day       Enum_DayType
  startTime DateTime
  endTime   DateTime
  headquarter   Headquarter @relation(fields: [headquarterId], references: [id])
  headquarterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Headquarter {
  id          String     @id @default(cuid())
  name        String
  phoneNumber String?
  address     String
  shedules    Schedule[]
  tables      Table[]
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id           String        @id @default(cuid())
  number       String        @unique
  capacity     Int
  reservations Reservation[]
  headquarter   Headquarter @relation(fields: [headquarterId], references: [id])
  headquarterId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reservation {
  id             String   @id @default(cuid())
  date           DateTime
  occasion       String?
  numberOfPeople Int
  reservationTable Table  @relation(fields: [tableId], references: [id])
  tableId          String
  user             User   @relation(fields: [userId], references: [id])
  userId           String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}